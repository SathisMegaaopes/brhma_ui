    const [formData, setFormData] = React.useState({
        //First Page ---
        firstname: 'sssssss',
        lastname: 'sssssss',
        dateOfBirth: '2024-09-17', //Format of a data -( 2024/09/26 ) 
        employeeNumber: '0000',
        gender: 'Male',
        email: 'test34@gmail.com',
        mobileNumber: '9778164504',
        phone: '9778164504',
        bloodGroup: 'A',
        dateOfJoining: '2024-09-18',
        fathersName: 'testfathername',
        fathersOccupation: 'testfatheroccupation',
        countryOfOrigin: 'testindia',
        nationality: 'testIndian',
        emergencyContactName: 'testemergencycontactname',
        emergencyContactNumber: '8777842222',
        emergencyContactRelation: 'testemergencycontactrelation',
        spouseName: 'testspousename',
        physicallyChallenged: 'No',
        education: 'B.E.,',
        addressprofType: '',     // 21  // 17 // 6 // 5 // 15 // 8 // 6 

        //Second Page ---
        reportingmanager: 'Kannan R',
        reportingteamlead: 'Kannan R',
        designation: 'CEO',
        department: 'Executive',
        team: 'IT Team',
        referrdby: 'Santhosh',
        employmentstatus: 'Probation',
        employeestatus: 'Active',
        shift: '00:00 - 09:00',
        grade: 'L1',
        probabationperiod: '180',
        salaryofferred: '12000',
        totalmonthlyctc: '12000',
        attendancebonus: 'Yes',
        totalyearlyctc: '144000',
        billablestatus: 'Billable',
        addresprofpath: '',

        //Third page ---
        currentaddress: '',
        permanentAddress: '',
        currentCity: '',
        currentPincode: '',
        permanentcity: '',
        permanentPincode: '',


        //Fouth Page ---
        organization1: '',
        designation1: '',
        startdate1: '',
        enddate1: '',
        totalExperience1: '',

        organization2: '',
        designation2: '',
        startdate2: '',
        enddate2: '',
        totalExperience2: '',

        organization3: '',
        designation3: '',
        startdate3: '',
        enddate3: '',
        totalExperience3: '',

        //Fiveth page ----

        aadhaarnumber: '',
        pannumber: '',
        passportnumber: '',
        uannumber: '',
        pfnumber: '',
        pfjoindate: '',
        esinumber: '',
        lwfnumber: '',


        //Sixth page ----

        modeofpayment: '',
        bankname: '',
        branchname: '',
        ifsccode: '',
        accountNumber: '',
        beneficiarycode: '',
        
    });




     //Second Page ---

        // reportingmanager: 'Kannan R',
        // reportingteamlead: 'Kannan R',
        // designation: 'CEO',
        // department: 'Executive',
        // team: 'IT Team',
        // referrdby: 'Santhosh',
        // employmentstatus: 'Probation',
        // employeestatus: 'Active',
        // shift: '00:00 - 09:00',
        // grade: 'L1',
        // probabationperiod: '180',
        // salaryofferred: '12000',
        // totalmonthlyctc: '12000',
        // attendancebonus: 'Yes',
        // totalyearlyctc: '144000',
        // billablestatus: 'Billable',
        // addresprofpath: '',

        //Third page ---

        // currentaddress: '',
        // permanentAddress: '',
        // currentCity: '',
        // currentPincode: '',
        // permanentcity: '',
        // permanentPincode: '',


        //Fouth Page ---

        // organization1: '',
        // designation1: '',
        // startdate1: '',
        // enddate1: '',
        // totalExperience1: '',

        // organization2: '',
        // designation2: '',
        // startdate2: '',
        // enddate2: '',
        // totalExperience2: '',

        // organization3: '',
        // designation3: '',
        // startdate3: '',
        // enddate3: '',
        // totalExperience3: '',

        //Fiveth page ----

        // aadhaarnumber: '',
        // pannumber: '',
        // passportnumber: '',
        // uannumber: '',
        // pfnumber: '',
        // pfjoindate: '',
        // esinumber: '',
        // lwfnumber: '',


        //Sixth page ----

        // modeofpayment: '',
        // bankname: '',
        // branchname: '',
        // ifsccode: '',
        // accountNumber: '',
        // beneficiarycode: '',













        // const Department = ['Executive', 'Operations', 'Human Resource', 'IT Infrastructure', 'Facility Management', 'Learning and Development', 'Business Development', 'Software Development']

// const Teams = ['Management', 'Supervisor/Manager', 'Documentation and Recruitment', 'Recruitment', 'Front Office', 'IT Team', 'Admin and Facility', 'Quality Control', 'Sales', 'Software Team']



// const shifts = [
//     "00:00 - 09:00",
//     "00:30 - 09:30",
//     "01:00 - 10:00",
//     "01:30 - 10:30",
//     "02:00 - 11:00",
//     "02:30 - 11:30",
//     "03:00 - 12:00",
//     "03:30 - 12:30",
//     "04:00 - 13:00",
//     "04:30 - 13:30",
//     "05:00 - 14:00",
//     "05:30 - 14:30",
//     "06:00 - 15:00",
//     "06:30 - 15:30",
//     "07:00 - 16:00",
//     "07:30 - 16:30",
//     "08:00 - 17:00",
//     "08:30 - 17:30",
//     "09:00 - 18:00",
//     "09:30 - 18:30",
//     "10:00 - 19:00",
//     "10:30 - 19:30",
//     "11:00 - 20:00",
//     "11:30 - 20:30",
//     "12:00 - 21:00",
//     "12:30 - 21:30",
//     "13:00 - 22:00",
//     "13:30 - 22:30",
//     "14:00 - 23:00",
//     "14:30 - 23:30",
//     "15:00 - 00:00",
//     "15:30 - 00:30",
//     "16:00 - 01:00",
//     "16:30 - 01:30",
//     "17:00 - 02:00",
//     "17:30 - 02:30",
//     "18:00 - 03:00",
//     "18:30 - 03:30",
//     "19:00 - 04:00",
//     "19:30 - 04:30",
//     "20:00 - 05:00",
//     "20:30 - 05:30",
//     "21:00 - 06:00",
//     "21:30 - 06:30",
//     "22:00 - 07:00",
//     "22:30 - 07:30",
//     "23:00 - 08:00",
//     "23:30 - 08:30"
// ];





// function Sidebar() {
//     const { sharedTab, setSharedTab } = useSharedContext();
//     const { search } = useLocation();
//     const queryParams = new URLSearchParams(search);
//     const [isOpen, setIsOpen] = useState(false);
//     const [activeTab, setActiveTab] = useState(() => {
//         // Get the active tab from sessionStorage or default to 'info'
//         return sessionStorage.getItem("activeTab") || 'info';
//     });

//     const navigate = useNavigate();
//     const userinfo = JSON.parse(sessionStorage.getItem("user_info"));
//     const AuthorizedPerson = userinfo.user_role;

//     React.useEffect(() => {
//         // Save the activeTab to sessionStorage whenever it changes
//         sessionStorage.setItem("activeTab", activeTab);

//         switch (activeTab) {
//             case 'info':
//                 navigate("/dashboard");
//                 break;
//             case 'CandidateEvaluation':
//                 navigate("/dashboard/evalution");
//                 break;
//             case 'CandidateDatabase':
//                 navigate("/dashboard/candidate-master");
//                 break;
//             case 'particularEmployee':
//                 navigate(sharedTab.TabUrl);
//                 break;
//             case 'EmployeeMaster':
//                 navigate('/dashboard/employee-master');
//                 break;
//             case 'EmployeeMaster2':
//                 navigate(`/dashboard/employee-master/?id=${idValue}`);
//                 break;
//             default:
//                 navigate("/");
//         }
//     }, [activeTab, navigate]);

//     React.useEffect(() => {
//         if (sharedTab.active === 1) {
//             setActiveTab('particularEmployee');
//         } else {
//             setActiveTab('info');
//         }
//     }, [sharedTab.active]);

//     const handleMouseEnter = () => {
//         setIsOpen(true);
//     };

//     const handleMouseLeave = () => {
//         setIsOpen(false);
//     };

//     const handleTabChange = (tab) => {
//         setActiveTab(tab);
//         setSharedTab({
//             Tabname: null,
//             TabUrl: null,
//             active: 0,
//             backendUrl: null,
//         });
//     };

//     const renderContent = () => {
//         switch (activeTab) {
//             case 'info':
//                 return <MOSDashboard />;
//             case 'CandidateEvaluation':
//                 return <CandidateInterview />;
//             case 'CandidateDatabase':
//                 return <MOSCandidate />;
//             case 'particularEmployee':
//                 const employid = queryParams.get('employid');
//                 const fromdate = queryParams.get('fromdate');
//                 const todate = queryParams.get('todate');
//                 return <MOSCandidate emp_id={employid} fromDate={fromdate} toDate={todate} />;
//             case 'EmployeeMaster':
//                 return <EmployeeTable />;
//             case 'EmployeeMaster2':
//                 return <EmployeeTable1 />;
//             default:
//                 return <MOSDashboard />;
//         }
//     };

//     return (
//         <>
//             <SidebarContainer
//                 onMouseEnter={handleMouseEnter}
//                 onMouseLeave={handleMouseLeave}
//                 isOpen={isOpen}
//             >
//                 <SidebarIcon disableRipple aria-label="info" isOpen={isOpen} onClick={() => handleTabChange('info')} isActive={activeTab === 'info'}>
//                     <AddTaskIcon sx={{ fontSize: 30 }} />
//                     {isOpen && <span>&nbsp;&nbsp;&nbsp;Dashboard</span>}
//                 </SidebarIcon>
//                 <SidebarIcon disableRipple aria-label="CandidateEvaluation" isOpen={isOpen} onClick={() => handleTabChange('CandidateEvaluation')} isActive={activeTab === 'CandidateEvaluation'}>
//                     <PersonSearchSharpIcon sx={{ fontSize: 35 }} />
//                     {isOpen && <span>&nbsp;&nbsp;&nbsp;Candidate Evaluation</span>}
//                 </SidebarIcon>
//                 {AuthorizedPerson === 1 ? (
//                     <SidebarIcon disableRipple aria-label="CandidateDatabase" isOpen={isOpen} onClick={() => handleTabChange('CandidateDatabase')} isActive={activeTab === 'CandidateDatabase'}>
//                         <StorageRoundedIcon sx={{ fontSize: 30 }} />
//                         {isOpen && <span>&nbsp;&nbsp;&nbsp;Candidate Database</span>}
//                     </SidebarIcon>
//                 ) : (
//                     ''
//                 )}
//                 {AuthorizedPerson === 1 && (
//                     <SidebarIcon disableRipple aria-label="EmployeeMaster" isOpen={isOpen} onClick={() => handleTabChange('EmployeeMaster')} isActive={activeTab === 'EmployeeMaster'}>
//                         <SupervisorAccountIcon sx={{ fontSize: 30 }} />
//                         {isOpen && <span>&nbsp;&nbsp;&nbsp;Employee Master</span>}
//                     </SidebarIcon>
//                 )}
//             </SidebarContainer>
//             <MainContainer>
//                 {renderContent()}
//             </MainContainer>
//         </>
//     );
// }



// function Sidebar() {

//     const { sharedTab, setSharedTab } = useSharedContext();
//     const { search } = useLocation();
//     const queryParams = new URLSearchParams(search);
//     const [isOpen, setIsOpen] = useState(false);
//     const [activeTab, setActiveTab] = useState('info');

//     const navigate = useNavigate();

//     const userinfo = JSON.parse(sessionStorage.getItem("user_info"));

//     const AuthorizedPerson = userinfo.user_role


//     React.useEffect(() => {
//         if (sharedTab.active === 1) {
//             setActiveTab('particularEmployee')
//         } else {
//             setActiveTab('info')
//         }
//     }, [sharedTab.active])


//     React.useEffect(() => {
//         switch (activeTab) {
//             case 'info':
//                 navigate("/dashboard");
//                 break;
//             case 'CandidateEvaluation':
//                 navigate("/dashboard/evalution");
//                 break;
//             case 'CandidateDatabase':
//                 navigate("/dashboard/candidate-master");
//                 break;
//             case 'particularEmployee':
//                 navigate(sharedTab.TabUrl);
//                 break;
//             case 'EmployeeMaster':
//                 navigate('/dashboard/employee-master');
//                 break;
//             case 'EmployeeMaster2':
//                 navigate(`/dashboard/employee-master/?id=${idValue}`);
//                 break;
//             default:
//                 navigate("/");
//         }
//     }, [activeTab, navigate]);


//     const handleMouseEnter = () => {
//         setIsOpen(true);
//     };


//     const handleMouseLeave = () => {
//         setIsOpen(false);
//     };


//     const handleTabChange = (tab) => {
//         setActiveTab(tab);
//         setSharedTab({
//             Tabname: null,
//             TabUrl: null,
//             active: 0,
//             backendUrl: null
//         })
//     };


//     const renderContent = () => {
//         switch (activeTab) {
//             case 'info':
//                 return <MOSDashboard />;
//             case 'CandidateEvaluation':
//                 return <CandidateInterview />;
//             case 'CandidateDatabase':
//                 return <MOSCandidate />;
//             case 'particularEmployee':

//                 const employid = queryParams.get('employid');
//                 const fromdate = queryParams.get('fromdate');
//                 const todate = queryParams.get('todate');

//                 return <MOSCandidate emp_id={employid} fromDate={fromdate} toDate={todate} />;
//             case 'EmployeeMaster':
//                 return <EmployeeTable />

//             case 'EmployeeMaster2':
//                 return <EmployeeTable1 />

//             default:
//                 return <MOSDashboard />;
//         }
//     };

//     return (
//         <>
//             <SidebarContainer
//                 onMouseEnter={handleMouseEnter}
//                 onMouseLeave={handleMouseLeave}
//                 isOpen={isOpen}
//             >
//                 <SidebarIcon disableRipple aria-label="info" isOpen={isOpen} onClick={() => handleTabChange('info')} isActive={activeTab === 'info'} >
//                     <AddTaskIcon sx={{ fontSize: 30 }} />
//                     {isOpen && <span>&nbsp;&nbsp;&nbsp;Dashboard</span>}
//                 </SidebarIcon>
//                 <SidebarIcon disableRipple aria-label="CandidateEvaluation" isOpen={isOpen} onClick={() => handleTabChange('CandidateEvaluation')} isActive={activeTab === 'CandidateEvaluation'} >
//                     <PersonSearchSharpIcon sx={{ fontSize: 35 }} />
//                     {isOpen && <span>&nbsp;&nbsp;&nbsp;Candidate Evaluation</span>}
//                 </SidebarIcon>
//                 {AuthorizedPerson === 1 ?
//                     <SidebarIcon disableRipple aria-label="CandidateDatabase" isOpen={isOpen} onClick={() => handleTabChange('CandidateDatabase')} isActive={activeTab === 'CandidateDatabase'} >
//                         <StorageRoundedIcon sx={{ fontSize: 30 }} />
//                         {isOpen && <span>&nbsp;&nbsp;&nbsp;Candidate Database</span>}
//                     </SidebarIcon> : ''}

//                 {AuthorizedPerson === 1 &&
//                     <SidebarIcon disableRipple aria-label="EmployeeMaster" isOpen={isOpen} onClick={() => handleTabChange('EmployeeMaster')} isActive={activeTab === 'EmployeeMaster'} >
//                         <SupervisorAccountIcon sx={{ fontSize: 30 }} />
//                         {isOpen && <span>&nbsp;&nbsp;&nbsp;Employee Master </span>}
//                     </SidebarIcon>}

//             </SidebarContainer>
//             <MainContainer>
//                 {renderContent()}
//             </MainContainer>
//         </>
//     );
// }





                    // <Box
                    //     sx={{
                    //         height: '70vh',
                    //         width: '100%',
                    //         display: 'flex',
                    //         justifyContent: 'center',
                    //         alignItems: 'center',
                    //     }}
                    // >
                    //     <Grid
                    //         container
                    //         justifyContent="center"
                    //         alignItems="center"
                    //     >
                    //         <Grid item sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>
                    //             <Diversity2Icon sx={{ fontSize: 100, marginTop: '-40px', color: 'gray' }} />
                    //             <Typography variant='h5' sx={{ mt: '30px' }}>Sorry , There is no Team available ....  </Typography>
                    //         </Grid>

                    //     </Grid>

                    // </Box>



                        {/* // <Box
                            //     sx={{
                            //         position: 'absolute',
                            //         top: -20,
                            //         left: 0,
                            //         right: 40,
                            //         bottom: 0,
                            //         zIndex: 0,
                            //         display: 'flex',
                            //         justifyContent: 'center',
                            //         alignItems: 'center',
                            //         // p: { xs: 2, sm: 3, md: 4 },
                            //         // borderRadius: 2,
                            //     }}
                            // > */}
                        {/* {openEdit ? <Button
                                variant="contained"
                                color="primary"
                                startIcon={<EditIcon />}
                                onClick={() => setOpenEdit(false)}
                                sx={{
                                    position: 'absolute',
                                    top: 0,
                                    right: 20,
                                    zIndex: 5,
                                    backgroundColor: '#1976d2',
                                    '&:hover': {
                                        backgroundColor: '#1565c0',
                                    },
                                }}
                            />

                                :

                                <Button
                                    variant="contained"
                                    color="primary"
                                    startIcon={<ClearIcon />}
                                    onClick={() => setOpenEdit(true)}
                                    sx={{
                                        position: 'absolute',
                                        top: 0,
                                        right: 20,
                                        zIndex: 5,
                                        backgroundColor: '#1976d2',
                                        '&:hover': {
                                            backgroundColor: '#1565c0',
                                        },
                                    }}
                                />


                            } */}

                                                // </Box>
